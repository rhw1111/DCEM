{"version":3,"sources":["./node_modules/silly-datetime/dest/index.js","./src/app/base/base.ser/http-service.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAa;;AAEb;AACA;AACA,YAAY,IAAI;AAChB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,cAAc;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,cAAc;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,QAAQ,oBAAoB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0B;;;;;;;;;;;;;;;;;;;AChJ2C;AACgC;AAExB;AAEF;AAKjD,IAAa,WAAW,GAAxB,MAAa,WAAW;IAGtB,YACU,IAAgB,EAChB,WAA8B,EAC9B,SAAyB;QAFzB,SAAI,GAAJ,IAAI,CAAY;QAChB,gBAAW,GAAX,WAAW,CAAmB;QAC9B,cAAS,GAAT,SAAS,CAAgB;QALnC,kBAAa,GAAY,KAAK,CAAC;QACvB,oBAAe,GAAC,EAAE,CAAC;IAO3B,CAAC;IACM,aAAa,CAClB,GAAW,EACX,MAAW,EACX,eAAe,EACf,aAAa;QAEb,iDAAiD;QACjD,OAAO,IAAI,CAAC,IAAI;aACb,IAAI,CAAC,IAA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","file":"default~serving-mc-reservation-com-list-list-module~serving-technical-support-com-list-list-module-es2015.js","sourcesContent":["'use strict';\n\n/**\n * 将输入的任意对象转换成 Date，如果装换失败将返回当前时间\n * @param  {any} datetime 需要被格式化的时间\n * @return {Date}         转换好的 Date\n */\nfunction getDateObject(datetime) {\n  var t = datetime instanceof Date ? datetime : new Date(datetime);\n  if (!t.getDate()) {\n    t = new Date();\n  }\n  return t;\n}\n\n/**\n * 格式化时间\n * @param  {Date}   datetime  需要被格式化的时间\n * @param  {string} formatStr 格式化字符串，默认为 'YYYY-MM-DD HH:mm:ss'\n * @return {string}           格式化后的时间字符串\n */\nfunction format(datetime, formatStr) {\n  var t = getDateObject(datetime);\n  var hours = undefined,\n      o = undefined,\n      i = 0;\n  formatStr = formatStr || 'YYYY-MM-DD HH:mm:ss';\n  hours = t.getHours();\n  o = [['M+', t.getMonth() + 1], ['D+', t.getDate()],\n  // H 24小时制\n  ['H+', hours],\n  // h 12小时制\n  ['h+', hours > 12 ? hours - 12 : hours], ['m+', t.getMinutes()], ['s+', t.getSeconds()]];\n  // 替换 Y\n  if (/(Y+)/.test(formatStr)) {\n    formatStr = formatStr.replace(RegExp.$1, (t.getFullYear() + '').substr(4 - RegExp.$1.length));\n  }\n  // 替换 M, D, H, h, m, s\n  for (; i < o.length; i++) {\n    if (new RegExp('(' + o[i][0] + ')').test(formatStr)) {\n      formatStr = formatStr.replace(RegExp.$1, RegExp.$1.length === 1 ? o[i][1] : ('00' + o[i][1]).substr(('' + o[i][1]).length));\n    }\n  }\n  // 替换 a/A 为 am, pm\n  return formatStr.replace(/a/ig, hours > 11 ? 'pm' : 'am');\n}\n\n/**\n * CONST and VAR for .fromNow\n */\n// 预设语言：英语\nvar LOCALE_EN = {\n  future: 'in %s',\n  past: '%s ago',\n  s: 'a few seconds',\n  mm: '%s minutes',\n  hh: '%s hours',\n  dd: '%s days',\n  MM: '%s months',\n  yy: '%s years'\n};\n// 预设语言：简体中文\nvar LOCALE_ZH_CN = {\n  future: '%s内',\n  past: '%s前',\n  s: '几秒',\n  mm: '%s分钟',\n  hh: '%s小时',\n  dd: '%s天',\n  MM: '%s月',\n  yy: '%s年'\n};\n// 当前本地化语言对象\nvar _curentLocale = undefined;\n\n/**\n * 修改本地化语言\n * @param  {string|Object}   string: 预设语言 `zh-cn` 或 `en`；Object: 自定义 locate 对象\n */\nfunction locate(arg) {\n  var newLocale = undefined,\n      prop = undefined;\n  if (typeof arg === 'string') {\n    newLocale = arg === 'zh-cn' ? LOCALE_ZH_CN : LOCALE_EN;\n  } else {\n    newLocale = arg;\n  }\n  if (!_curentLocale) {\n    _curentLocale = {};\n  }\n  for (prop in newLocale) {\n    if (newLocale.hasOwnProperty(prop) && typeof newLocale[prop] === 'string') {\n      _curentLocale[prop] = newLocale[prop];\n    }\n  }\n}\n\n/**\n * CONST for .fromNow\n */\n// 各计算区间\nvar DET_STD = [['yy', 31536e6], // 1000 * 60 * 60 * 24 * 365 一年月按 365 天算\n['MM', 2592e6], // 1000 * 60 * 60 * 24 * 30 一个月按 30 天算\n['dd', 864e5], // 1000 * 60 * 60 * 24\n['hh', 36e5], // 1000 * 60 * 60\n['mm', 6e4], // 1000 * 60\n['s', 0]];\n\n/**\n * 计算给出时间和当前时间的时间距离\n * @param  {Date}   datetime 需要计算的时间\n * @return {string}          时间距离\n */\n// 只要大于等于 0 都是秒\nfunction fromNow(datetime) {\n  if (!_curentLocale) {\n    // 初始化本地化语言为 en\n    locate('');\n  }\n  var det = +new Date() - +getDateObject(datetime);\n  var format = undefined,\n      str = undefined,\n      i = 0,\n      detDef = undefined,\n      detDefVal = undefined;\n  if (det < 0) {\n    format = _curentLocale.future;\n    det = -det;\n  } else {\n    format = _curentLocale.past;\n  }\n  for (; i < DET_STD.length; i++) {\n    detDef = DET_STD[i];\n    detDefVal = detDef[1];\n    if (det >= detDefVal) {\n      str = _curentLocale[detDef[0]].replace('%s', parseInt(det / detDefVal, 0) || 1);\n      break;\n    }\n  }\n  return format.replace('%s', str);\n}\n\nexports.format = format;\nexports.locate = locate;\nexports.fromNow = fromNow;","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { isObject, isFunction, debug } from 'util';\r\nimport { LoadingController } from '@ionic/angular';\r\nimport { AppConfig } from '../../app.config';\r\nimport { ToastController } from '@ionic/angular';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpService {\r\n  isLoadingOpen: boolean = false;\r\n  private InterfacePreURL=\"\";\r\n  constructor(\r\n    private http: HttpClient,\r\n    private loadingCtrl: LoadingController,\r\n    private toastCtrl:ToastController\r\n  ) {\r\n\r\n  }\r\n  public postForToaken(\r\n    url: string,\r\n    params: any,\r\n    successCallback,\r\n    errorCallback\r\n  ): any {\r\n    // 此处使用的post模式为非严格模式，如果要使用严格模式，请把参数放在第二个位置 覆盖null\r\n    return this.http\r\n      .post(this.getEnvironmentUrl()+url,null, {\r\n        params: this.encodeHttpParams(params),\r\n        headers: this.getHeaders()\r\n      })\r\n      .subscribe(\r\n        (res: any) => {\r\n          console.log(res);\r\n          this.responseSuccess(res, function(msg) {\r\n            if (successCallback) {\r\n              successCallback(res, msg);\r\n            }\r\n          });\r\n        },\r\n        err => {\r\n          if (errorCallback) {\r\n            errorCallback(err);\r\n          }\r\n        }\r\n      );\r\n  }\r\n\r\n  //get数据\r\n  getForToaken(url: string, params?: any): any {\r\n      return this.http.get(this.getEnvironmentUrl()+url, {\r\n      params: this.encodeComplexHttpParams(params),\r\n      headers: this.getHeaders()\r\n    });\r\n  }\r\n  GET(\r\n    url: string,\r\n    params: any,\r\n    callback?: (res: any, err: any) => void\r\n  ): void {\r\n    this.http\r\n        .get(this.getEnvironmentUrl()+url, { params: this.encodeComplexHttpParams(params) })\r\n      .subscribe(\r\n        res => {\r\n          console.log('get res=' + res);\r\n          callback && callback(res, null);\r\n        },\r\n        error => {\r\n          callback && callback(null, error);\r\n        }\r\n      );\r\n  }\r\n\r\n  POST(\r\n    url: string,\r\n    params: any,\r\n    callback?: (res: any, error: any) => void\r\n  ): void {\r\n    console.log('POST...');\r\n    this.http.post(this.getEnvironmentUrl()+url, this.encodeComplexHttpParams(params)).subscribe(\r\n      (res: any) => {\r\n        console.log('POST res=' + res);\r\n        console.log(res);\r\n        callback && callback(res, null);\r\n      },\r\n      err => {\r\n        console.log('POST err=');\r\n        console.log(err);\r\n        this.requestFailed(err);\r\n        callback && callback(null, err);\r\n      }\r\n    );\r\n  }\r\n\r\n  //对象参数请求\r\n  private encodeHttpParams(params: any): any {\r\n    if (!params) return null;\r\n    return new HttpParams({fromObject: params});\r\n  }\r\n\r\n  //字符串参数封装\r\n  private encodeComplexHttpParams(params: any): any {\r\n    if (!params) return null;\r\n    return new HttpParams({ fromString: params });\r\n  }\r\n\r\n  /**\r\n   * 处理响应的事件\r\n   * @param res\r\n   * @param {Function} error\r\n   */\r\n  private responseSuccess(res: any, callback) {\r\n    if (res.code !== '0') {\r\n      // 失败\r\n      if (res.msg) {\r\n        callback({ code: res.code, msg: res.msg });\r\n      } else {\r\n        const data = res.datas;\r\n        let errorMsg = res.message;\r\n        if(data!=null){\r\n          data.map(i => {\r\n            errorMsg = i.errorMsg + '\\n';\r\n          });\r\n        }  \r\n        callback({ code: res.code, msg: errorMsg });\r\n      }\r\n    } else {\r\n      callback(res);\r\n    }\r\n  }\r\n  /**\r\n   * 处理请求失败事件\r\n   * @param url\r\n   * @param err\r\n   */\r\n  private requestFailed(err) {\r\n    let msg = '请求发生异常';\r\n    const status = err.status;\r\n    console.log('status=' + status);\r\n    if (status === 0) {\r\n      msg = '请求失败，请求响应出错';\r\n    } else if (status === 404) {\r\n      msg = '请求失败，未找到请求地址';\r\n    } else if (status === 500) {\r\n      msg = '请求失败，服务器出错，请稍后再试';\r\n    } else {\r\n      msg = '未知错误，请检查网络';\r\n    }\r\n    return msg;\r\n  }\r\n\r\n\r\n  /**\r\n   * 头部信息获取，主要用于处理token\r\n  **/\r\n  private getHeaders() {\r\n    const token = this.getToken();\r\n    console.log(token);\r\n    return token ? new HttpHeaders({ \r\n      token: token,\r\n      'Content-Type': 'application/json;charset=UTF-8',\r\n      'Accept': 'application/json' \r\n    }) : null;\r\n  }\r\n  /*\r\n   * 使用本地缓存的方式来获取token信息\r\n   */\r\n  getToken() {\r\n    return window.localStorage.getItem('auth-token');\r\n  }\r\n\r\n  /**\r\n   * 将token信息保存到本地缓存中 用缓存的形式实现token验证\r\n   * @param token\r\n   */\r\n  setToken(token) {\r\n    // 目前只解析token字段，缓存先只存该字段\r\n    // JSON.stringify(token)\r\n    window.localStorage.setItem('auth-token', token);\r\n  }\r\n  //获取接口请求地址\r\n  getEnvironmentUrl() {\r\n    console.log(\"sdad:\"+url);\r\n    var url=  window.localStorage.getItem('environmenturl');\r\n    \r\n    if(url==null || url==undefined){\r\n      url=\"https://subcrmdevapi.sokon.com/dcem\";\r\n    }\r\n    return url;\r\n  }\r\n  //跟进环境设置请求地址\r\n  setEnvironmentUrl(environment) {\r\n    let url=\"\";\r\n    console.log(\"environment:\"+environment);\r\n    switch (environment) {\r\n      case 'Dev':\r\n        url=\"https://subcrmdevapi.sokon.com/dcem\";\r\n          break;\r\n      case 'Sit':\r\n        url=\"https://subcrmdevapi.sokon.com/dcem\";\r\n          break;\r\n      case 'Uat':\r\n        url=\"https://subcrmuatapi.sokon.com/dcem\";\r\n          break;\r\n      case 'Pro':\r\n        url=\"https://mscrm.sokon.com/dcem\";\r\n          break;    \r\n      default:\r\n        url=\"http://localhost:52151\";\r\n          break;\r\n  }\r\n    window.localStorage.setItem('environmenturl', url);\r\n  }\r\n  /**\r\n   * 清理token\r\n   */\r\n  clearToken() {\r\n    window.localStorage.setItem('auth-token', null);\r\n  }\r\n\r\n  \r\n  /**\r\n   * 统一调用此方法显示loading\r\n   * @param content 显示的内容\r\n   */\r\n  async showLoading(content: string) {\r\n    if (!this.isLoadingOpen) {\r\n      const loading = await this.loadingCtrl.create({\r\n        message: content,\r\n        duration: 300,\r\n        translucent: false\r\n      });\r\n      console.log('showLoading....');\r\n      return await loading.present();\r\n    }\r\n  }\r\n  /**\r\n   * 关闭loading\r\n  */\r\n  async hideLoading() {\r\n    console.log('hideLoading....');\r\n    if (this.isLoadingOpen) {\r\n      await this.loadingCtrl.dismiss();\r\n      this.isLoadingOpen = false;\r\n    }\r\n  }\r\n  /**\r\n   * Toast 提示\r\n   * @param message \r\n   */\r\n  async presentToastError(message) {\r\n    const toast = await this.toastCtrl.create({\r\n      message: message,\r\n      duration: 2000,\r\n      color:\"danger\",\r\n      position:\"top\"\r\n    });\r\n    toast.present();\r\n  }\r\n\r\n  async presentToastSucess(message) {\r\n    const toast = await this.toastCtrl.create({\r\n      message: message,\r\n      duration: 1500,\r\n      color:\"success\",\r\n      position:\"middle\"\r\n    });\r\n    toast.present();\r\n  }\r\n\r\n/*------------------------------------------------------- */\r\n  /*\r\n  api/focus  \r\n  */\r\n  ajaxGet(url:String) {\r\n\r\n    var api = this.getEnvironmentUrl() + url;\r\n    return new Promise((resove, reject) => {\r\n      this.http.get(api).subscribe((response) => {\r\n        resove(response);\r\n      }, (error) => {\r\n        reject(error);\r\n      })\r\n    })\r\n  }\r\n\r\n  /*\r\n api/focus  \r\n */\r\n  ajaxPost(url:String, json:Object) {\r\n    var api = this.getEnvironmentUrl() + url;\r\n    return new Promise((resove, reject) => {\r\n      this.http.post(api, json).subscribe((response) => {\r\n        resove(response);\r\n      }, (error) => {\r\n        reject(error);\r\n      })\r\n    })\r\n  }\r\n\r\n  /*本地缓存处理*/\r\n  /*\r\n   * 使用本地缓存的方式来获取数据\r\n   */\r\n  GetDataCache(name) {\r\n    return window.localStorage.getItem('datacache-'+name);\r\n  }\r\n\r\n  /**\r\n   *  将数据存储到本地缓存中\r\n   * @param name\r\n   * @param data\r\n   */\r\n  SetDataCache(name,data) {\r\n    window.localStorage.setItem('datacache-'+name, data);\r\n  }\r\n  /*\r\n   * 清楚本地缓存数据\r\n   */\r\n  ClearDataCache(name) {\r\n    return window.localStorage.setItem('datacache-'+name,\"\");\r\n  }\r\n}\r\n"],"sourceRoot":""}