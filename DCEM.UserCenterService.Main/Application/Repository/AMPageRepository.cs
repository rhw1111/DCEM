//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DCEM.UserCenterService.Main.Application.Repository
{
    using DCEM.UserCenterService.Main.Application.Repository.Contrac;
    using DCEM.UserCenterService.Main.ViewModel.Request;
    using DCEM.UserCenterService.Main.ViewModel.Response;
    using System.Threading.Tasks;
    using MSLibrary.Xrm;
    using System;
    using System.Xml.Linq;

    public class AMPageRepository : IAMPageRepository
    {
        public async Task<XDocument> GetElementConfigsXml()
        {
            return await Task<XDocument>.Run(() =>
            {
                var fetchXml = $@"<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>
                   <entity name='mcs_am_elementconfig'>
                     <attribute name='mcs_am_elementconfigid' />
                     <attribute name='mcs_elementcategory' />
                     <attribute name='mcs_defaultvalue' />
                     <attribute name='mcs_code' />
                     <order attribute='mcs_code' descending='false' />
                   </entity>
                 </fetch>";
                return XDocument.Parse(fetchXml);
            });
        }

        public async Task<XDocument> GetPageDetailsXml(Guid pageId)
        {
            return await Task<XDocument>.Run(() =>
            {
                var fetchXml = $@"<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>
                   <entity name='mcs_am_pagedetail'>
                     <attribute name='mcs_am_pagedetailid' />
                     <attribute name='mcs_page' />
                     <attribute name='mcs_element' />
                     <attribute name='mcs_displayname' />
                     <attribute name='mcs_content' />
                    <attribute name='mcs_sort' />
                     <order attribute='mcs_displayname' descending='false' />
                     <filter type='and'>
                       <condition attribute='mcs_page' operator='eq' value='{pageId}' />
                     </filter>
                    <link-entity name='mcs_am_elementconfig' from='mcs_am_elementconfigid'            to='mcs_element' visible='false' link-type='outer'                 alias='config'>
                        <attribute name='mcs_code' />
                      </link-entity>
                   </entity>
                 </fetch>";
                return XDocument.Parse(fetchXml);
            });
        }

        public async Task<XDocument> GetPageFieldsXml(Guid pageId)
        {
            return await Task<XDocument>.Run(() =>
            {
                var fetchXml = $@"<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>
                  <entity name='mcs_am_pagefield'>
                    <attribute name='mcs_am_pagefieldid' />
                    <attribute name='mcs_name' />
                    <attribute name='mcs_tip' />
                    <attribute name='mcs_required' />
                    <attribute name='mcs_placeholder' />
                    <attribute name='mcs_label' />
                    <attribute name='mcs_displayorder' />
                    <order attribute='mcs_name' descending='false' />
                    <filter type='and'>
                      <condition attribute='mcs_am_pageid' operator='eq' value='{pageId}' />
                    </filter>
                    <link-entity name='mcs_am_pagefieldconfig' from='mcs_am_pagefieldconfigid' to='mcs_am_pagefieldconfigid'             visible='false' link-type='outer' alias='config'>
                      <attribute name='mcs_name' />
                    </link-entity>
                  </entity>
                </fetch>";
                return XDocument.Parse(fetchXml);
            });
        }

        public async Task<XDocument> GetUserBehaviorXml(Guid pageId)
        {
            return await Task<XDocument>.Run(() =>
            {
                var fetchXml = $@"<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='false'>
                  <entity name='mcs_am_page'>
                    <attribute name='mcs_am_pageid' />
                    <attribute name='mcs_shareable' />
                    <filter type='and'>
                      <condition attribute='mcs_am_pageid' operator='eq'  value='{pageId}' />
                    </filter>
                    <link-entity name='mcs_behavior' from='mcs_behaviorid' to='mcs_behavior' visible='false' link-type='outer'    alias='behavior'>
                      <attribute name='mcs_code' />
                    </link-entity>
                  </entity>
                </fetch>";
                return XDocument.Parse(fetchXml);
            });
        }
    }
}
