//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DCEM.UserCenterService.Main.Application.Repository
{
    using DCEM.UserCenterService.Main.Application.Repository.Contrac;
    using DCEM.UserCenterService.Main.ViewModel.Request;
    using DCEM.UserCenterService.Main.ViewModel.Response;
    using System.Threading.Tasks;
    using MSLibrary.Xrm;
    using System.Xml.Linq;

    public class ContentManagementRepository : IContentManagementRepository
    {
        public async Task<XDocument> GetActivityListFetchXml(ContentListRequest contentListRequest)
        {
            return await Task<XDocument>.Run(() =>
            {
                var fetchXml = $@"<fetch version='1.0' count='{contentListRequest.PageSize}' page='{contentListRequest.PageIndex}'  output-format='xml-platform' mapping='logical' distinct='false'>
                  <entity name='mcs_activitycontents'>
                    <attribute name='mcs_activitycontentsid' />
                    <attribute name='mcs_name' />
                    <attribute name='mcs_thumbnail' />
                    <attribute name='mcs_contentstatus' />
                    <attribute name='mcs_activitytime' />
                    <attribute name='mcs_activityaddress' />
                    <order attribute='mcs_name' descending='false' />
                  </entity>
                </fetch>";
                return XDocument.Parse(fetchXml);
            });
        }

        public async Task<XDocument> GetFrontContentFetchXml(string defCode)
        {
            return await Task<XDocument>.Run(() =>
            {
                var fetchXml = $@"<fetch version='1.0' output-format='xml-platform' mapping='logical' distinct='true'>
                                  <entity name='mcs_frontcontent'>
                                    <attribute name='mcs_name' />
                                    <attribute name='mcs_contenttext' />
                                    <attribute name='mcs_description' />
                                    <attribute name='mcs_thumbnail' />  
                                    <attribute name='mcs_url' />  
                                    <filter type='and'>
                                      <condition attribute='mcs_contentstatus' operator='eq' value='1' /> 
                                      <condition attribute='mcs_defcode' operator='eq' value='{defCode}' /> 
                                    </filter>  
                                  </entity>
                                </fetch>";
                return XDocument.Parse(fetchXml);
            });
        }

        public async Task<XDocument> GetFrontListFetchXml(ContentListRequest contentListRequest)
        {
            return await Task<XDocument>.Run(() =>
            {
                var fetchXml = $@"<fetch version='1.0' count='{contentListRequest.PageSize}' page='{contentListRequest.PageIndex}'  output-format='xml-platform' mapping='logical' distinct='false'>
                  <entity name='mcs_frontcontent'>
                    <attribute name='mcs_frontcontentid' />
                    <attribute name='mcs_name' />
                    <attribute name='mcs_thumbnail' />
                    <attribute name='mcs_description' />
                    <attribute name='mcs_contentstatus' />
                    <order attribute='mcs_name' descending='false' />
                  </entity>
                </fetch>";
                return XDocument.Parse(fetchXml);
            });
        }

        public async Task<XDocument> GetNewsListFetchXml(ContentListRequest contentListRequest)
        {
            return await Task<XDocument>.Run(() =>
            {
                var fetchXml = $@"<fetch version='1.0' count='{contentListRequest.PageSize}' page='{contentListRequest.PageIndex}' output-format='xml-platform' mapping='logical' distinct='false'>
                  <entity name='mcs_newscontents'>
                    <attribute name='mcs_newscontentsid' />
                    <attribute name='mcs_name' />
                    <attribute name='mcs_thumbnail' />
                    <attribute name='mcs_description' />
                    <attribute name='mcs_contentstatus' />
                    <order attribute='mcs_name' descending='false' />
                  </entity>
                </fetch>";
                return XDocument.Parse(fetchXml);
            });
        }
    }
}
