//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DCEM.UserCenterService.Main.Application.Services
{
    using DCEM.UserCenterService.Main.Application.Repository.Contrac;
    using DCEM.UserCenterService.Main.Application.Services.Contrac;
    using DCEM.UserCenterService.Main.ViewModel.Request;
    using DCEM.UserCenterService.Main.ViewModel.Response;
    using System.Threading.Tasks;
    using MSLibrary.Xrm;
    using System;
    using DCEM.UserCenterService.Main.Common;
    using System.Xml.Linq;
    using static DCEM.UserCenterService.Main.Common.UserEnum;
    using System.IO;

    public class ContentManagementService : IContentManagementService
    {

        private ICrmService _crmService;

        public IContentManagementRepository _contentmanagementRepository;

        public IConfigRepository _configRepository;

        public ContentManagementService(ICrmService crmService, IContentManagementRepository contentmanagementRepository, IConfigRepository configRepository)
        {
            _crmService = crmService;
            _contentmanagementRepository = contentmanagementRepository;
            _configRepository = configRepository;
        }

        public async Task<ContentListResponse> GetList(ContentListRequest contentListRequest)
        {
            try
            {
                var response = new ContentListResponse() { };
                var entities = await GetEntities(contentListRequest);
                response.ContentList = entities.Results;
                response.ALLTotalCount = entities.Count;
                response.PageSize = contentListRequest.PageSize;
                response.CurrentPage = contentListRequest.PageIndex;

                response.PicPathPre = await GetConfig();
                return response;
            }
            catch (Exception ex)
            {
                return new ContentListResponse() { ErrorMessage = ex.Message + ";" + ex.InnerException?.Message };
            }
        }

        private async Task<CrmEntityCollection> GetEntities(ContentListRequest contentListRequest)
        {
            var crmRequestHelper = new CrmRequestHelper();
            XDocument fetchXdoc = null;
            string entityName = string.Empty;

            switch (contentListRequest.Type)
            {
                case ContentType.Activity:
                    fetchXdoc = await _contentmanagementRepository.GetActivityListFetchXml(contentListRequest);
                    entityName = "mcs_activitycontents";
                    break;
                case ContentType.Front:
                    fetchXdoc = await _contentmanagementRepository.GetFrontListFetchXml(contentListRequest);
                    entityName = "mcs_frontcontent";
                    break;
                case ContentType.News:
                    fetchXdoc = await _contentmanagementRepository.GetNewsListFetchXml(contentListRequest);
                    entityName = "mcs_newscontents";
                    break;
            }
            return await crmRequestHelper.ExecuteAsync(_crmService, entityName, fetchXdoc);
        }

        public async Task<ContentDetailResponse> GetDetail(ContentDetailRequest contentDetailRequest)
        {
            try
            {
                var response = new ContentDetailResponse() { };
                response.Content = await GetEntity(contentDetailRequest.Type, contentDetailRequest.Id, contentDetailRequest.DefCode);
                response.PicPathPre = await GetConfig();
                return response;
            }
            catch (Exception ex)
            {
                return new ContentDetailResponse() { ErrorMessage = ex.Message + ";" + ex.InnerException?.Message };
            }
        }

        private async Task<CrmEntity> GetEntity(ContentType type, Guid? id = null, string defCode = "")
        {
            string entityName = string.Empty;
            switch (type)
            {
                case ContentType.Activity:
                    entityName = "mcs_activitycontents";
                    break;
                case ContentType.Front:
                    entityName = "mcs_frontcontent";
                    break;
                case ContentType.News:
                    entityName = "mcs_newscontents";
                    break;
            }
            var crmRequestHelper = new CrmRequestHelper();
            //判断是传id还是唯一码
            if (id.HasValue)
            {
                return await crmRequestHelper.Retrieve(_crmService, entityName, id.Value);
            }
            if (!string.IsNullOrWhiteSpace(defCode))
            {
                XDocument fetchXdoc = null;
                //目前暂时只有前端内容有唯一码
                fetchXdoc = await _contentmanagementRepository.GetFrontContentFetchXml(defCode);
                var entities = await crmRequestHelper.ExecuteAsync(_crmService, entityName, fetchXdoc);
                if (entities != null && entities.Results != null && entities.Results.Count > 0)
                {
                    return entities.Results[0];
                }
            }
            return null;
        }

        private async Task<string> GetConfig()
        {
            var crmRequestHelper = new CrmRequestHelper();
            XDocument fetchXdoc = null;
            fetchXdoc = await _configRepository.GetConfigFetchXml("Key_ContentPicUpload_Url");
            var entities = await crmRequestHelper.ExecuteAsync(_crmService, "mcs_cepconfig", fetchXdoc);
            if (entities != null && entities.Results != null && entities.Results.Count > 0)
            {
                return entities.Results[0].Attributes["mcs_val"]?.ToString();
            }
            return null;
        }

        public async Task<ContentPageResponse> GenerateContentPage(ContentPageRequest contentPageRequest)
        {
            var response = new ContentPageResponse();
            try
            {
                //查询实体
                var entity = await GetEntity(contentPageRequest.Type, contentPageRequest.Id);
                if (entity == null)
                {
                    throw new Exception("未找到对应的内容数据");
                }
                //将富文本转为html
                var targetHtml = entity.Attributes["mcs_contenttext"]?.ToString();
                if (string.IsNullOrWhiteSpace(targetHtml))
                {
                    throw new Exception("该内容页没有正文内容");
                }
                //防乱码，加入滚动条样式，后期改为模板读取
                targetHtml = "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />" + @"<style>
                      /* 设置滚动条的样式 */
                  ::-webkit-scrollbar{
                      width: 3px;
                  }
                  /*滚动槽*/
                  ::-webkit-scrollbar-track{
                      box-shadow: inset 0 0 6px rgba(0,0,0,0.1);
                      border-radius: 10px;
                  }
                  /* 滚动条滑块 */
                  ::-webkit-scrollbar-thumb {
                      border-radius: 10px;
                      background: rgba(0, 0, 0, 0.1);
                      box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.15);
                  }
                  </style>" + targetHtml;
                //写入目标地址
                var resultPath = @"HtmlResources\Fronts\" + entity.Attributes["mcs_frontcontentid"].ToString();
                var targetPath = Directory.GetCurrentDirectory() + @"\wwwroot\" + resultPath;
                if (!Directory.Exists(targetPath))
                {
                    Directory.CreateDirectory(targetPath);
                }
                var fileName = @"\" + entity.EntityName.ToString() + ".html";
                File.WriteAllText(targetPath + fileName, targetHtml);
                response.Url = resultPath + fileName;
            }
            catch (Exception ex)
            {
                response.IsSuccess = false;
                response.Url = ex.Message + ";" + ex.InnerException?.Message;
            }
            return response;
        }
    }
}
