//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DCEM.UserCenterService.Main.Application.Services
{
    using DCEM.UserCenterService.Main.Application.Repository.Contrac;
    using DCEM.UserCenterService.Main.Application.Services.Contrac;
    using DCEM.UserCenterService.Main.ViewModel.Request;
    using DCEM.UserCenterService.Main.ViewModel.Response;
    using System.Threading.Tasks;
    using MSLibrary.Xrm;
    using System;
    using DCEM.UserCenterService.Main.Common;
    using System.Xml.Linq;
    using static DCEM.UserCenterService.Main.Common.UserEnum;

    public class ContentManagementService : IContentManagementService
    {

        private ICrmService _crmService;

        public IContentManagementRepository _contentmanagementRepository;

        public IConfigRepository _configRepository;

        public ContentManagementService(ICrmService crmService, IContentManagementRepository contentmanagementRepository, IConfigRepository configRepository)
        {
            _crmService = crmService;
            _contentmanagementRepository = contentmanagementRepository;
            _configRepository = configRepository;
        }

        public async Task<ContentListResponse> GetList(ContentListRequest contentListRequest)
        {
            try
            {
                var response = new ContentListResponse() { };
                var entities = await GetEntities(contentListRequest);
                response.ContentList = entities.Results;
                response.ALLTotalCount = entities.Count;
                response.PageSize = contentListRequest.PageSize;
                response.CurrentPage = contentListRequest.PageIndex;

                response.PicPathPre = await GetConfig();
                return response;
            }
            catch (Exception ex)
            {
                return new ContentListResponse() { ErrorMessage = ex.Message + ";" + ex.InnerException?.Message };
            }
        }

        private async Task<CrmEntityCollection> GetEntities(ContentListRequest contentListRequest)
        {
            var crmRequestHelper = new CrmRequestHelper();
            XDocument fetchXdoc = null;
            string entityName = string.Empty;

            switch (contentListRequest.Type)
            {
                case ContentType.Activity:
                    fetchXdoc = await _contentmanagementRepository.GetActivityListFetchXml(contentListRequest);
                    entityName = "mcs_activitycontents";
                    break;
                case ContentType.Front:
                    fetchXdoc = await _contentmanagementRepository.GetFrontListFetchXml(contentListRequest);
                    entityName = "mcs_frontcontent";
                    break;
                case ContentType.News:
                    fetchXdoc = await _contentmanagementRepository.GetNewsListFetchXml(contentListRequest);
                    entityName = "mcs_newscontents";
                    break;
            }
            return await crmRequestHelper.ExecuteAsync(_crmService, entityName, fetchXdoc);
        }

        public async Task<ContentDetailResponse> GetDetail(ContentDetailRequest contentDetailRequest)
        {
            try
            {
                var response = new ContentDetailResponse() { };
                response.Content = await GetEntity(contentDetailRequest);
                response.PicPathPre = await GetConfig();
                return response;
            }
            catch (Exception ex)
            {
                return new ContentDetailResponse() { ErrorMessage = ex.Message + ";" + ex.InnerException?.Message };
            }
        }

        private async Task<CrmEntity> GetEntity(ContentDetailRequest contentDetailRequest)
        {
            string entityName = string.Empty;
            switch (contentDetailRequest.Type)
            {
                case ContentType.Activity:
                    entityName = "mcs_activitycontents";
                    break;
                case ContentType.Front:
                    entityName = "mcs_frontcontent";
                    break;
                case ContentType.News:
                    entityName = "mcs_newscontents";
                    break;
            }
            var crmRequestHelper = new CrmRequestHelper();
            //判断是传id还是唯一码
            if (contentDetailRequest.Id.HasValue)
            {
                return await crmRequestHelper.Retrieve(_crmService, entityName, contentDetailRequest.Id.Value);
            }
            if (!string.IsNullOrWhiteSpace(contentDetailRequest.DefCode))
            {
                XDocument fetchXdoc = null;
                //目前暂时只有前端内容有唯一码
                fetchXdoc = await _contentmanagementRepository.GetFrontContentFetchXml(contentDetailRequest.DefCode);
                var entities = await crmRequestHelper.ExecuteAsync(_crmService, entityName, fetchXdoc);
                if (entities != null && entities.Results != null && entities.Results.Count > 0)
                {
                    return entities.Results[0];
                }
            }
            return null;
        }

        private async Task<string> GetConfig()
        {
            var crmRequestHelper = new CrmRequestHelper();
            XDocument fetchXdoc = null;
            fetchXdoc = await _configRepository.GetConfigFetchXml("Key_ContentPicUpload_Url");
            var entities = await crmRequestHelper.ExecuteAsync(_crmService, "mcs_cepconfig", fetchXdoc);
            if (entities != null && entities.Results != null && entities.Results.Count > 0)
            {
                return entities.Results[0].Attributes["mcs_val"]?.ToString();
            }
            return null;
        }
    }
}
