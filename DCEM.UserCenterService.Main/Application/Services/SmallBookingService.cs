//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DCEM.UserCenterService.Main.Application.Services
{
    using DCEM.UserCenterService.Main.Application.Repository.Contrac;
    using DCEM.UserCenterService.Main.Application.Services.Contrac;
    using DCEM.UserCenterService.Main.ViewModel.Request;
    using DCEM.UserCenterService.Main.ViewModel.Response;
    using System.Threading.Tasks;
    using MSLibrary.Xrm;
    using System.Collections.Generic;
    using System;
    using MSLibrary.Xrm.Message.RetrieveMultipleFetch;
    using System.Xml.Linq;
    using System.Linq;
    using MSLibrary;
    using System.Text.RegularExpressions;

    public class SmallBookingService : ISmallBookingService
    {

        private ICrmService _crmService;
        public ISmallBookingRepository _smallbookingRepository;
        private string dicHeadKey;
        private Dictionary<string, IEnumerable<string>> dicHead;

        public SmallBookingService(ICrmService crmService, ISmallBookingRepository smallbookingRepository)
        {
            _crmService = crmService;
            _smallbookingRepository = smallbookingRepository;
            dicHeadKey = "Prefer";
            dicHead = new Dictionary<string, IEnumerable<string>>();
            dicHead.Add(dicHeadKey, new List<string>() { "odata.include-annotations=\"*\"" });
        }

        public async Task<SmallBookingListResponse> QuerySmallBooking(SmallBookingListRequest request)
        {
            var smallBookingListResponse = new SmallBookingListResponse();
            var disSmallBooking = new Dictionary<Guid, SmallBooking>();

            #region 查询所有小订活动
            var fetchSmallBooking = _smallbookingRepository.QuerySmallBooking(request);
            var fetchXdocSmallBooking = XDocument.Parse(fetchSmallBooking);
            var fetchRequest = new CrmRetrieveMultipleFetchRequestMessage()
            {
                EntityName = "mcs_smallbooking",
                FetchXml = fetchXdocSmallBooking
            };
            fetchRequest.Headers.Add(dicHeadKey, dicHead[dicHeadKey]);
            var fetchResponse = await _crmService.Execute(fetchRequest);
            var smallBookingResponse = fetchResponse as CrmRetrieveMultipleFetchResponseMessage;
            #endregion

            //存在小订活动才执行小订流程
            if (smallBookingResponse.Value.Results.Count > 0)
            {
                //只返回一条小订活动
                var nowsmallBooking = smallBookingResponse.Value.Results[0];
                #region 查询小订活动图片
                var fetchBookingImage = _smallbookingRepository.QueryBookingImage(nowsmallBooking.Id);
                var fetchXdocBookingImage = XDocument.Parse(fetchBookingImage);
                var fetchBookingImageRequest = new CrmRetrieveMultipleFetchRequestMessage()
                {
                    EntityName = "mcs_tc_productimage",
                    FetchXml = fetchXdocBookingImage
                };
                fetchBookingImageRequest.Headers.Add(dicHeadKey, dicHead[dicHeadKey]);
                var fetchBookingImageResponse = await _crmService.Execute(fetchBookingImageRequest);
                var bookingImageResponse = fetchBookingImageResponse as CrmRetrieveMultipleFetchResponseMessage;
                #endregion

                #region 组装小订活动
                var smallBooking = new SmallBooking();
                //把符合条件的最新一条小订活动返回出去
                var entity = nowsmallBooking;
                smallBooking.SmallBookingInfo = entity.Attributes;
                #endregion

                #region 组装小订活动图片
              
                var host = "https://ceo-oss.oss-cn-hangzhou.aliyuncs.com/";
                foreach (var bookingimage in bookingImageResponse.Value.Results)
                {
                    //var productGuid = Guid.Parse(entity.Attributes.Value<string>("_mcs_product_value"));
                    bookingimage.Attributes.Add("ext_fullurl", host + entity.Attributes.Value<string>("mcs_imagename"));
                    smallBooking.BookingImageArray.Add(bookingimage.Attributes);
                }
                #endregion

                #region 查询小订权益包
                var fetchEquityPackage = _smallbookingRepository.QueryEquityPackage(nowsmallBooking.Id);
                var fetchXdocEquityPackage = XDocument.Parse(fetchEquityPackage);
                var fetchEquityPackageRequest = new CrmRetrieveMultipleFetchRequestMessage()
                {
                    EntityName = "mcs_equitypackage",
                    FetchXml = fetchXdocEquityPackage
                };
                fetchEquityPackageRequest.Headers.Add(dicHeadKey, dicHead[dicHeadKey]);
                var fetchEquityPackageResponse = await _crmService.Execute(fetchEquityPackageRequest);
                var equityPackageResponse = fetchEquityPackageResponse as CrmRetrieveMultipleFetchResponseMessage;
                #endregion

                #region 查询权益包对应的权益项
                var equityResponse = new CrmRetrieveMultipleFetchResponseMessage();
                if (equityPackageResponse.Value.Results.Count > 0)
                {
                    foreach (var item in equityPackageResponse.Value.Results)
                    {
                        var equityPackage = new EquityPackage();
                        var fetchEquity = _smallbookingRepository.QueryEquity(item.Id);
                        var fetchXdocEquity = XDocument.Parse(fetchEquity);
                        var fetchEquityRequest = new CrmRetrieveMultipleFetchRequestMessage()
                        {
                            EntityName = "mcs_equity",
                            FetchXml = fetchXdocEquity
                        };
                        fetchEquityRequest.Headers.Add(dicHeadKey, dicHead[dicHeadKey]);
                        var fetchEquityResponse = await _crmService.Execute(fetchEquityRequest);
                        equityResponse = fetchEquityResponse as CrmRetrieveMultipleFetchResponseMessage;

                        #region 组装小订权益包与权益项
                        equityPackage.EquityPackageInfo = item.Attributes;
                        if (equityResponse.Value.Results.Count > 0)
                        {
                            foreach (var equity in equityResponse.Value.Results)
                            {
                                equityPackage.EquityArray.Add(equity.Attributes);
                            }
                        }
                        smallBooking.EquityPackageArray.Add(equityPackage);
                        #endregion
                    }
                }
                #endregion

                #region 查询小订选配
                var optionalResponse = new CrmRetrieveMultipleFetchResponseMessage();
                var fetchOptional = _smallbookingRepository.QueryOptional(nowsmallBooking.Id);
                var fetchXdocOptional = XDocument.Parse(fetchOptional);
                var fetchOptionalRequest = new CrmRetrieveMultipleFetchRequestMessage()
                {
                    EntityName = "mcs_optional",
                    FetchXml = fetchXdocOptional
                };
                fetchOptionalRequest.Headers.Add(dicHeadKey, dicHead[dicHeadKey]);
                var fetchOptionalResponse = await _crmService.Execute(fetchOptionalRequest);
                optionalResponse = fetchOptionalResponse as CrmRetrieveMultipleFetchResponseMessage;
                #endregion

                #region 查询选配图片
                foreach (var item in optionalResponse.Value.Results)
                {
                    Optional optional = new Optional();
                    var optionalImageResponse = new CrmRetrieveMultipleFetchResponseMessage();
                    var fetchOptionalImage = _smallbookingRepository.QueryOptionalImage(item.Id);
                    var fetchXdocOptionalImage = XDocument.Parse(fetchOptionalImage);
                    var fetchOptionalImageRequest = new CrmRetrieveMultipleFetchRequestMessage()
                    {
                        EntityName = "mcs_tc_productimage",
                        FetchXml = fetchXdocOptionalImage
                    };
                    fetchOptionalImageRequest.Headers.Add(dicHeadKey, dicHead[dicHeadKey]);
                    var fetchOptionalImageResponse = await _crmService.Execute(fetchOptionalImageRequest);
                    optionalImageResponse = fetchOptionalImageResponse as CrmRetrieveMultipleFetchResponseMessage;
                    #region 组装小订选配及选配图片
                    optional.OptionalInfo = item.Attributes;
                    foreach (var optionalimage in optionalImageResponse.Value.Results)
                    {
                        optional.OptionalImageArray.Add(optionalimage.Attributes);
                    }
                    smallBooking.OptionalArray.Add(optional);
                    #endregion
                }
                #endregion

                smallBookingListResponse.SmallBookingList.Add(smallBooking);
            }

            return smallBookingListResponse;
        }

        public async Task<ValidateResult<CrmEntity>> AddOrEdit(SmallBookingRequest request)
        {
            var validateResult = new ValidateResult<CrmEntity>();
            var reusetCrmEntity = new CrmEntity("mcs_smallorder", new Guid());
            try
            {
                #region 通过预约号查询是否有预约记录
                var fetchBlindOrder = _smallbookingRepository.QueryBlindOrder(request.BlindOrder);

                var fetchXdocBlindOrder = XDocument.Parse(fetchBlindOrder);
                var fetchBlindOrderRequest = new CrmRetrieveMultipleFetchRequestMessage()
                {
                    EntityName = "mcs_blindorder",
                    FetchXml = fetchXdocBlindOrder
                };
                fetchBlindOrderRequest.Headers.Add(dicHeadKey, dicHead[dicHeadKey]);
                var fetchResponse = await _crmService.Execute(fetchBlindOrderRequest);
                var blindOrderResponse = fetchResponse as CrmRetrieveMultipleFetchResponseMessage;
                if (blindOrderResponse.Value.Results.Count == 0)
                {
                    validateResult.Data = reusetCrmEntity;
                    validateResult.Result = false;
                    validateResult.Description = "预约单号不存在";
                    return validateResult;
                }
                CrmEntity blindOrder = blindOrderResponse.Value.Results[0];
                #endregion

                #region 查询唯一线索
                var onlyleadid = blindOrder.Attributes.Value<string>("_mcs_onlyleadid_value");
                var onlyleadEntityName = blindOrder.Attributes.Value<string>("_mcs_onlyleadid_value@Microsoft.Dynamics.CRM.lookuplogicalname"); //new CrmEntity("mcs_smallorder", new Guid());
                var onlyleadEF = new CrmEntityReference(onlyleadEntityName, Guid.Parse(onlyleadid));

                //查询唯一线索记录
                var fetchOnlyLead = _smallbookingRepository.QueryOnlyLead(onlyleadid);
                var fetchXdocOnlyLead = XDocument.Parse(fetchOnlyLead);
                var fetchOnlyLeadRequest = new CrmRetrieveMultipleFetchRequestMessage()
                {
                    EntityName = "mcs_onlylead",
                    FetchXml = fetchXdocOnlyLead
                };
                fetchOnlyLeadRequest.Headers.Add(dicHeadKey, dicHead[dicHeadKey]);
                var fetchOnlyLeadResponse = await _crmService.Execute(fetchOnlyLeadRequest);
                var onlyLeadResponse = fetchOnlyLeadResponse as CrmRetrieveMultipleFetchResponseMessage;
                CrmEntity onlyLead = onlyLeadResponse.Value.Results[0];
                #endregion

                #region 根据预订推荐人UserId 查询唯一线索
                CrmEntity referreronlylead = null;
                if (!string.IsNullOrWhiteSpace(request.Spare4))
                {
                    var fetchReferrerOnlyLead = _smallbookingRepository.QueryOnlyLeadByUserId(request.Spare4);
                    var fetchXdocReferrerOnlyLead = XDocument.Parse(fetchReferrerOnlyLead);
                    var fetchReferrerOnlyLeadRequest = new CrmRetrieveMultipleFetchRequestMessage()
                    {
                        EntityName = "mcs_onlylead",
                        FetchXml = fetchXdocReferrerOnlyLead
                    };
                    fetchReferrerOnlyLeadRequest.Headers.Add(dicHeadKey, dicHead[dicHeadKey]);
                    var fetchReferrerOnlyLeadResponse = await _crmService.Execute(fetchBlindOrderRequest);
                    var ReferrerOnlyLeadResponse = fetchReferrerOnlyLeadResponse as CrmRetrieveMultipleFetchResponseMessage;
                    if (ReferrerOnlyLeadResponse.Value.Results.Count > 0)
                    {
                        referreronlylead = ReferrerOnlyLeadResponse.Value.Results[0];
                    }
                }
                #endregion

                //是否包含厅店
                CrmEntity dealer = null;
                var dealerid = onlyLead.Attributes.Value<string>("_mcs_dealerid_value");
                if (!string.IsNullOrWhiteSpace(dealerid))
                {
                    var fetchDealer = _smallbookingRepository.GetDealerById(dealerid);
                    var fetchXdocDealer = XDocument.Parse(fetchDealer);
                    var fetchDealerRequest = new CrmRetrieveMultipleFetchRequestMessage()
                    {
                        EntityName = "mcs_dealer",
                        FetchXml = fetchXdocDealer
                    };
                    fetchDealerRequest.Headers.Add(dicHeadKey, dicHead[dicHeadKey]);
                    var fetchDealerResponse = await _crmService.Execute(fetchDealerRequest);
                    var DealerResponse = fetchDealerResponse as CrmRetrieveMultipleFetchResponseMessage;
                    dealer = DealerResponse.Value.Results.Count > 0 ? DealerResponse.Value.Results[0] : null;
                }
                //2.通过小订订单号查询是否有小订编号，没有则创建
                var fetchSmallOrder = _smallbookingRepository.QuerySmallOrder(request.OrderCode);
                var fetchXdocSmallOrder = XDocument.Parse(fetchSmallOrder);
                var fetchrequest = new CrmRetrieveMultipleFetchRequestMessage()
                {
                    EntityName = "mcs_smallorder",
                    FetchXml = fetchXdocSmallOrder
                };
                fetchrequest.Headers.Add(dicHeadKey, dicHead[dicHeadKey]);
                var fetchSmallOrderResponse = await _crmService.Execute(fetchrequest);
                var smallOrderResponse = fetchSmallOrderResponse as CrmRetrieveMultipleFetchResponseMessage;
                var smallorder = smallOrderResponse.Value.Results.Count > 0 ? smallOrderResponse.Value.Results[0] : null;
                //3.根据传进来的小订记录状态，处理不同业务逻辑（0 - 待支付、1 - 已支付、2 - 申请退订、3 - 已关闭、4 - 已支付部分退订）
                if (smallorder == null)
                {
                    //3.1 默认第一次传进来的是待支付 新建记录
                    var creEntity = CreateSmallOrder(request, blindOrder, onlyLead, referreronlylead);
                    await _crmService.Create(creEntity);
                    reusetCrmEntity.Id = creEntity.Id;
                    //小订关联权益包、选配
                    if (!string.IsNullOrWhiteSpace(request.EquityPackageId))
                    {
                        //权益包多对多关联小订
                        AssociateEquityPackage(creEntity, request.EquityPackageId);
                    }
                    //小订关联权益包、选配
                    if (!string.IsNullOrWhiteSpace(request.OptionalId))
                    {
                        //选配多对多关联小订
                        AssociateOptional(creEntity, request.OptionalId);
                    }
                }

                //3.2 订单状态我已支付时，更新订单记录为已支付，创建销售机会，创建支付记录
                if (request.OrderStatus == 1)
                {
                    CrmEntity account = null;
                    if (dealer != null)
                    {
                        var fetchAccount = _smallbookingRepository.QueryAccount(onlyleadid, dealer.Id);
                        var fetchXdocAccount = XDocument.Parse(fetchAccount);
                        var fetchAccountRequest = new CrmRetrieveMultipleFetchRequestMessage()
                        {
                            EntityName = "account",
                            FetchXml = fetchXdocAccount
                        };
                        fetchAccountRequest.Headers.Add(dicHeadKey, dicHead[dicHeadKey]);
                        var fetchAccountResponse = await _crmService.Execute(fetchAccountRequest);
                        var AccountResponse = fetchAccountResponse as CrmRetrieveMultipleFetchResponseMessage;
                        account = AccountResponse.Value.Results.Count > 0 ? AccountResponse.Value.Results[0] : null;

                    }
                    if (account == null)
                    {
                        //查询没有厅店的销售机会
                        var fetchAccount = _smallbookingRepository.QueryAccountMater(onlyleadid);
                        var fetchXdocAccount = XDocument.Parse(fetchAccount);
                        var fetchAccountRequest = new CrmRetrieveMultipleFetchRequestMessage()
                        {
                            EntityName = "account",
                            FetchXml = fetchXdocAccount
                        };
                        fetchAccountRequest.Headers.Add(dicHeadKey, dicHead[dicHeadKey]);
                        var fetchAccountResponse = await _crmService.Execute(fetchAccountRequest);
                        var AccountResponse = fetchAccountResponse as CrmRetrieveMultipleFetchResponseMessage;
                        account = AccountResponse.Value.Results.Count > 0 ? AccountResponse.Value.Results[0] : null;
                    }
                    if (account == null)
                    {
                        //创建销售机会
                        CreateAccount(blindOrder, onlyLead, smallorder, request, dealer);
                    }
                    if (account != null)
                    {
                        var upaccount = new CrmExecuteEntity(account.EntityName, account.Id);
                        //关联小订记录
                        var smallOrderRef = new CrmEntityReference(smallorder.EntityName, smallorder.Id);
                        upaccount.Attributes.Add("mcs_smallorderid", smallOrderRef);
                        if (string.IsNullOrWhiteSpace(account.Attributes.Value<string>("mcs_dealerid")))
                        {
                            //关联到合作伙伴
                            if (dealer != null)
                            {
                                var dealerRef = new CrmEntityReference(dealer.EntityName, dealer.Id);
                                upaccount.Attributes.Add("mcs_dealerid", dealerRef);
                            }
                        }
                        //更新门店销售机会
                        await _crmService.Update(upaccount);

                        //更新盲定关联门店销售机会字段
                        var updBlindOrder = new CrmExecuteEntity(blindOrder.EntityName, blindOrder.Id);
                        var accountRef = new CrmEntityReference(account.EntityName, account.Id);
                        updBlindOrder.Attributes.Add("mcs_accountid", accountRef);
                        await _crmService.Update(updBlindOrder);
                    }

                    //创建支付记录
                    var paymentRecord = CreatePaymentRecord(smallorder, request);
                    await _crmService.Create(paymentRecord);

                    //修改小订记录状态
                    var upSmallOrder = new CrmExecuteEntity(smallorder.EntityName, smallorder.Id);
                    //小订状态
                    upSmallOrder.Attributes.Add("mcs_orderstatus", request.OrderStatus);
                    await _crmService.Update(upSmallOrder);
                  
                }

                ////3.3 订单状态为申请退订时，更新订单状态为申请退订，创建小订退订记录
                //if (request.OrderStatus == (int)SmallOrderStatus.ApplyForUnsubscribe)
                //{
                //    //创建小订退订记录
                //    CreateSmallRefund(smallorder, request, request);

                //    //修改小订记录状态
                //    UpdateSmallOrder(smallorder, (int)SmallOrderStatus.ApplyForUnsubscribe, request);
                //}

                ////3.4 订单状态为已退订时
                ////3.4.1 更新小订订单状态与可用订单总额、更新小订状态存在3 - 已关闭和4 - 已支付部分退订情况，如果可用订单总额为0，则说明已全部退完，为已关闭，否则为已支付部分退订
                ////3.4.2 如果订单状态为已退订了，则通过小订订单查询销售机会，关闭销售机会
                //if (request.OrderStatus == (int)SmallOrderStatus.Closed)
                //{
                //    //订单可用金额
                //    var oldavailabletotalorder = 0.00M;
                //    if (smallorder.Contains("mcs_availabletotalorder"))
                //    {
                //        oldavailabletotalorder = smallorder.GetAttributeValue<Money>("mcs_availabletotalorder").Value;
                //    }
                //    var nowavailabletotalorder = 0.00M;
                //    if (request.Transactionamount != null)
                //    {
                //        nowavailabletotalorder = (decimal)request.Transactionamount;
                //    }

                //    if (smallorder.Contains("mcs_orderstatus") && smallorder.GetAttributeValue<OptionSetValue>("mcs_orderstatus").Value != (int)SmallOrderStatus.Unpaid)
                //    {
                //        //创建支付记录
                //        CreatePaymentRecord(smallorder, request, request);
                //    }
                //    if (oldavailabletotalorder - nowavailabletotalorder <= 0.00M)
                //    {
                //        var account = QueryAccount(smallorder.Id, service);
                //        if (account != null)
                //        {
                //            //修改销售机会状态
                //            UpdateAccount(account, request);
                //        }
                //        //修改小订记录
                //        UpdateSmallOrder(smallorder, (int)SmallOrderStatus.Closed, 0.00M, request);
                //    }
                //    else
                //    {
                //        //修改小订记录
                //        UpdateSmallOrder(smallorder, (int)SmallOrderStatus.PartiallyCancelled, oldavailabletotalorder - nowavailabletotalorder, request);
                //    }
                //}

                ////执行处理
                //service.Execute(request);
                reusetCrmEntity.Id = smallorder.Id;
                validateResult.Data = reusetCrmEntity;
                validateResult.Result = true;
                validateResult.Description = "操作成功";
                return validateResult;
            }
            catch (Exception ex)
            {
                validateResult.Data = reusetCrmEntity;
                validateResult.Result = false;
                validateResult.Description = "操作失败"+"失败原因:"+ex.Message;
                return validateResult;
            }
        }

        /// <summary>
        /// 创建支付记录
        /// </summary>
        /// <param name="smallorder"></param>
        /// <param name="request"></param>
        private CrmExecuteEntity CreatePaymentRecord(CrmEntity smallorder, SmallBookingRequest request)
        {
            var paymentrecord = new CrmExecuteEntity("mcs_paymentrecord", Guid.NewGuid());
            //关联小订记录
            var smallOrderRef = new CrmEntityReference(smallorder.EntityName, smallorder.Id);
            paymentrecord.Attributes.Add("mcs_smallorderid", smallOrderRef);
            //支付记录序号
            if (!string.IsNullOrWhiteSpace(request.PaymentCode))
            {
                paymentrecord.Attributes.Add("mcs_name", request.PaymentCode);
            }
            //支付状态
            if (request.OrderStatus == 1)
            {
                paymentrecord.Attributes.Add("mcs_paymentstatus", request.OrderStatus);
            }
            //支付状态
            if (request.OrderStatus == 3)
            {
                paymentrecord.Attributes.Add("mcs_paymentstatus", request.OrderStatus);
            }
            //交易时间
            if (request.TransactionTime != null)
            {
                paymentrecord.Attributes.Add("mcs_transactiontime", DateTime.Parse(request.TransactionTime).ToUniversalTime());
            }
            //交易金额
            if (request.Transactionamount != null)
            {
                paymentrecord.Attributes.Add("mcs_transactionamount", (decimal)request.Transactionamount);
            }
            //支付渠道
            if (request.PaymentChannel != null)
            {
                paymentrecord.Attributes.Add("mcs_paymentchannel", request.PaymentChannel);
            }
            //支付流水号
            if (!string.IsNullOrWhiteSpace(request.Spare5))
            {
                paymentrecord.Attributes.Add("mcs_transactionflownumber", request.Spare5);
            }
            //用户支付id
            if (!string.IsNullOrWhiteSpace(request.Spare6))
            {
                paymentrecord.Attributes.Add("mcs_userpaymentid", request.Spare6);
            }
            return paymentrecord;

        }

        /// <summary>
        /// 创建销售机会
        /// </summary>
        /// <param name="blindOrder"></param>
        /// <param name="onlylead"></param>
        /// <param name="smallorder"></param>
        /// <param name="request"></param>
        /// <param name="dealer"></param>
        private async void CreateAccount(CrmEntity blindOrder, CrmEntity onlylead, CrmEntity smallorder, SmallBookingRequest request, CrmEntity dealer)
        {
            var createaccountentity = new CrmExecuteEntity("account", Guid.NewGuid());
            //将唯一线索的基本数据新增赋值到门店销售机会
            createaccountentity = InitAttributeAccount(onlylead, createaccountentity, request);
            //关联到合作伙伴
            if (dealer != null)
            {
                var dealerRef = new CrmEntityReference(dealer.EntityName, dealer.Id);
                createaccountentity.Attributes.Add("mcs_dealerid", dealerRef);
            }
            //如果唯一线索包含留资人员，则为门店销售机会上的初始跟进人员
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("mcs_capitalist")))
            {
                createaccountentity.Attributes.Add("mcs_firstappoint", onlylead.Attributes.Value<string>("mcs_capitalist"));
            }
            //关联唯一线索
            var onlyleadRef = new CrmEntityReference(onlylead.EntityName, onlylead.Id);
            createaccountentity.Attributes.Add("mcs_onlyleadid", onlyleadRef);
            //ownerid.赋值团队
            if (dealer != null && !string.IsNullOrWhiteSpace(dealer.Attributes.Value<string>("_mcs_teamid_value")))
            {
                var teamRef= new CrmEntityReference("team",Guid.Parse(dealer.Attributes.Value<string>("_mcs_teamid_value")));
                createaccountentity.Attributes.Add("ownerid", teamRef);
            }
            //关联小订记录
            var smallOrderRef = new CrmEntityReference(smallorder.EntityName, smallorder.Id);
            createaccountentity.Attributes.Add("mcs_smallorderid", smallOrderRef);
            //创建门店销售机会
            var reuset = await _crmService.Create(createaccountentity);

            //更新盲定关联门店销售机会字段
            var updBlindOrder = new CrmExecuteEntity(blindOrder.EntityName, blindOrder.Id);
            var accountRef= new CrmEntityReference("account", reuset);
            updBlindOrder.Attributes.Add("mcs_accountid", accountRef);
            await _crmService.Update(updBlindOrder);
        }

        /// <summary>
        /// 销售机会基础字段赋值
        /// </summary>
        /// <param name="onlylead"></param>
        /// <param name="accountentity"></param>
        /// <param name="request"></param>
        /// <returns></returns>
        private CrmExecuteEntity InitAttributeAccount(CrmEntity onlylead, CrmExecuteEntity accountentity, SmallBookingRequest request)
        {
            #region 门店销售机会基础数据赋值
            //姓名
            accountentity.Attributes.Add("name", request.FullName);
            //称呼
            if (onlylead.Attributes.Value<int?>("mcs_gender")!=null)
            {
                accountentity.Attributes.Add("mcs_gender", onlylead.Attributes.Value<int>("mcs_gender"));
            }
            //证件类型
            if (onlylead.Attributes.Value<int?>("mcs_idtype") != null)
            {
                accountentity.Attributes.Add("mcs_idtype", onlylead.Attributes.Value<int?>("mcs_idtype"));
            }
            //证件号码
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("mcs_identitycard")))
            {
                accountentity.Attributes.Add("mcs_identitycard", onlylead.Attributes.Value<string>("mcs_identitycard"));
            }
            //生日
            if (onlylead.Attributes.Value<DateTime?>("birthDate")!=null)
            {
                accountentity.Attributes.Add("mcs_birthdate", onlylead.Attributes.Value<DateTime?>("birthDate").Value.ToUniversalTime());
            }
            //渠道
            if (onlylead.Attributes.Value<int?>("mcs_channel")!= null)
            {
                accountentity.Attributes.Add("mcs_channel", onlylead.Attributes.Value<int?>("mcs_channel"));
            }
            //渠道用户ID
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("mcs_userid")))
            {
                accountentity.Attributes.Add("mcs_userid", onlylead.Attributes.Value<string>("mcs_userid"));
            }
            //手机号
            if (!string.IsNullOrWhiteSpace(request.MobilePhone))
            {
                accountentity.Attributes.Add("mcs_mobilephone", request.MobilePhone);
            }
            //邮箱
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("emailaddress1")))
            {
                accountentity.Attributes.Add("emailaddress1", onlylead.Attributes.Value<string>("emailaddress1"));
            }
            //备用邮箱
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("emailAddress2")))
            {
                accountentity.Attributes.Add("emailAddress2", onlylead.Attributes.Value<string>("emailAddress2"));
            }
            //办公电话区号
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("mcs_areacode")))
            {
                accountentity.Attributes.Add("mcs_areacode", onlylead.Attributes.Value<string>("mcs_areacode"));
            }
            //办公电话
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("telephone1")))
            {
                accountentity.Attributes.Add("telephone1", onlylead.Attributes.Value<string>("telephone1"));
            }
            //住宅电话
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("telephone2")))
            {
                accountentity.Attributes.Add("telephone2", onlylead.Attributes.Value<string>("telephone2"));
            }
            //其他电话
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("telephone3")))
            {
                accountentity.Attributes.Add("telephone3", onlylead.Attributes.Value<string>("telephone3"));
            }
            //传真区号
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("mcs_faxareacode")))
            {
                accountentity.Attributes.Add("mcs_faxareacode", onlylead.Attributes.Value<string>("mcs_faxareacode"));
            }
            //传真区号
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("fax")))
            {
                accountentity.Attributes.Add("fax", onlylead.Attributes.Value<string>("fax"));
            }
            //qq
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("mcs_qq")))
            {
                accountentity.Attributes.Add("mcs_qq", onlylead.Attributes.Value<string>("mcs_qq"));
            }
            //weibo号
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("mcs_weibo")))
            {
                accountentity.Attributes.Add("mcs_weibo", onlylead.Attributes.Value<string>("mcs_weibo"));
            }
            //weixin
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("mcs_weixin")))
            {
                accountentity.Attributes.Add("mcs_weixin", onlylead.Attributes.Value<string>("mcs_weixin"));
            }
            //年龄段
            if (onlylead.Attributes.Value<int?>("mcs_generation")!=null)
            {
                accountentity.Attributes.Add("mcs_generation", onlylead.Attributes.Value<int?>("mcs_generation"));
            }
            //车辆使用人
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("mcs_vehicleusers")))
            {
                accountentity.Attributes.Add("mcs_vehicleusers", onlylead.Attributes.Value<string>("mcs_vehicleusers"));
            }
            //关联到国家
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("_mcs_countryid_value")))
            {
                var countryRef = new CrmEntityReference("mcs_sysarea", Guid.Parse(onlylead.Attributes.Value<string>("_mcs_countryid_value")));
                accountentity.Attributes.Add("mcs_countryid", countryRef);
            }
            //关联到省
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("_mcs_provinceid_value")))
            {
                var provinceRef = new CrmEntityReference("mcs_sysarea", Guid.Parse(onlylead.Attributes.Value<string>("_mcs_provinceid_value")));
                accountentity.Attributes.Add("mcs_provinceid", provinceRef);
            }
            //关联到城市
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("_mcs_cityid_value")))
            {
                var cityRef = new CrmEntityReference("mcs_sysarea", Guid.Parse(onlylead.Attributes.Value<string>("_mcs_cityid_value")));
                accountentity.Attributes.Add("mcs_cityid", cityRef);
            }
            //区
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("_mcs_districtid_value")))
            {
                var districtRef = new CrmEntityReference("mcs_sysarea", Guid.Parse(onlylead.Attributes.Value<string>("_mcs_districtid_value")));
                accountentity.Attributes.Add("mcs_districtid", districtRef);
            }
            //身份证所在地
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("mcs_address")))
            {
                accountentity.Attributes.Add("mcs_address", onlylead.Attributes.Value<string>("mcs_address"));
            }
            //家庭地址
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("mcs_homeaddress")))
            {
                accountentity.Attributes.Add("mcs_homeaddress", onlylead.Attributes.Value<string>("mcs_homeaddress"));
            }
            //邮编
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("mcs_zipcode")))
            {
                accountentity.Attributes.Add("mcs_zipcode", onlylead.Attributes.Value<string>("mcs_zipcode"));
            }
            //单位名称
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("company")))
            {
                accountentity.Attributes.Add("mcs_company", onlylead.Attributes.Value<string>("company"));
            }
            //单位税务号
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("mcs_taxcode")))
            {
                accountentity.Attributes.Add("mcs_taxcode", onlylead.Attributes.Value<string>("mcs_taxcode"));
            }
            //单位联系人手机
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("business2")))
            {
                accountentity.Attributes.Add("mcs_business", onlylead.Attributes.Value<string>("business2"));
            }
            //工作地址
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("mcs_workaddress")))
            {
                accountentity.Attributes.Add("mcs_workaddress", onlylead.Attributes.Value<string>("mcs_workaddress"));
            }
            //首选联系方式
            if (onlylead.Attributes.Value<int?>("preferredcontactmethodcode")!=null)
            {
                accountentity.Attributes.Add("preferredcontactmethodcode", onlylead.Attributes.Value<int?>("preferredcontactmethodcode"));
            }
            //婚姻状态
            if (onlylead.Attributes.Value<int?>("mcs_ismarry") != null)
            {
                accountentity.Attributes.Add("mcs_ismarry", onlylead.Attributes.Value<int?>("mcs_ismarry"));
            }
            //家庭成员数量
            if (onlylead.Attributes.Value<int?>("mcs_familymembernum") != null)
            {
                accountentity.Attributes.Add("mcs_familymembernum", onlylead.Attributes.Value<int?>("mcs_familymembernum"));
            }
            //是否有子女
            if (onlylead.Attributes.Value<int?>("mcs_ishavechildren") != null)
            {
                accountentity.Attributes.Add("mcs_ishavechildren", onlylead.Attributes.Value<int?>("mcs_ishavechildren"));
            }
            //兴趣爱好
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("mcs_hobby")))
            {
                accountentity.Attributes.Add("mcs_hobby", onlylead.Attributes.Value<string>("mcs_hobby"));
            }
            //行业
            if (onlylead.Attributes.Value<int?>("mcs_industrycode") != null)
            {
                accountentity.Attributes.Add("industrycode", onlylead.Attributes.Value<int?>("mcs_industrycode"));
            }
            //职务
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("jobtitle")))
            {
                accountentity.Attributes.Add("mcs_jobtitle", onlylead.Attributes.Value<string>("jobtitle"));
            }
            //宗教信仰
            if (onlylead.Attributes.Value<int?>("mcs_religion") != null)
            {
                accountentity.Attributes.Add("mcs_religion", onlylead.Attributes.Value<int?>("mcs_religion"));
            }
            //星座
            if (onlylead.Attributes.Value<int?>("mcs_constellation") != null)
            {
                accountentity.Attributes.Add("mcs_constellation", onlylead.Attributes.Value<int?>("mcs_constellation"));
            }
            //购车关注
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("mcs_carattention")))
            {
                accountentity.Attributes.Add("mcs_carattention", onlylead.Attributes.Value<string>("mcs_carattention"));
            }
            //关注原因
            if (onlylead.Attributes.Value<int?>("mcs_carereason")!=null)
            {
                accountentity.Attributes.Add("mcs_carereason", onlylead.Attributes.Value<int?>("mcs_carereason"));
            }
            //购买方式
            if (onlylead.Attributes.Value<int?>("mcs_purchaseway") != null)
            {
                accountentity.Attributes.Add("mcs_purchaseway", onlylead.Attributes.Value<int?>("mcs_purchaseway"));
            }
            //购买用途
            if (onlylead.Attributes.Value<int?>("mcs_purchasepurpose") != null)
            {
                accountentity.Attributes.Add("mcs_purchasepurpose", onlylead.Attributes.Value<int?>("mcs_purchasepurpose"));
            }
            //竞品车型
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("mcs_competingtype")))
            {
                accountentity.Attributes.Add("mcs_competingtype", onlylead.Attributes.Value<string>("mcs_competingtype"));
            }
            //意向等级
            if (onlylead.Attributes.Value<int?>("mcs_level")!=null)
            {
                accountentity.Attributes.Add("mcs_level", onlylead.Attributes.Value<int?>("mcs_level"));
            }
            //特殊备注
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("description")))
            {
                accountentity.Attributes.Add("description", onlylead.Attributes.Value<string>("description"));
            }
            if (!string.IsNullOrWhiteSpace(onlylead.Attributes.Value<string>("_mcs_contactid_value")))//潜客
            {
                var contactRef= new CrmEntityReference("contact", Guid.Parse(onlylead.Attributes.Value<string>("_mcs_contactid_value")));
                accountentity.Attributes.Add("mcs_contactid", contactRef);
            }
            //销售类型，1-整车销售，2-充电桩，3-服务类
            accountentity.Attributes.Add("mcs_salestype",1);
            //门店销售机会状态默认为待指派
            accountentity.Attributes.Add("mcs_customerstatus", 1);
            //销售机会类型 0：自动 1：手动
            accountentity.Attributes.Add("mcs_salesopportunitytype",0);

            return accountentity;
            #endregion
        }

        /// <summary>
        /// 小订订单关联选配
        /// </summary>
        /// <param name="creEntity"></param>
        /// <param name="equityPackageId"></param>
        private async void AssociateOptional(CrmExecuteEntity creEntity, string OptionalId)
        {
            string[] optionalArray = Regex.Split(OptionalId, ";", RegexOptions.IgnoreCase);
            foreach (var id in optionalArray)
            {
                await _crmService.Associate(creEntity.EntityName, "mcs_optional", "mcs_mcs_smallorder_mcs_optional", creEntity.Id, Guid.Parse(id));
            }
        }

        /// <summary>
        /// 小订订单关联权益包
        /// </summary>
        /// <param name="creEntity"></param>
        /// <param name="equityPackageId"></param>
        private  async void AssociateEquityPackage(CrmExecuteEntity creEntity, string equityPackageId)
        {
            string[] equityPackageArray = Regex.Split(equityPackageId, ";", RegexOptions.IgnoreCase);
            foreach (var id in equityPackageArray)
            {
                await _crmService.Associate(creEntity.EntityName, "mcs_equitypackage", "mcs_mcs_smallorder_mcs_equitypackage", creEntity.Id, Guid.Parse(id));
            }
        }

        /// <summary>
        /// 创建小订记录
        /// </summary>
        /// <param name="request"></param>
        /// <param name="blindOrder"></param>
        /// <param name="onlylead"></param>
        /// <param name="referreronlylead"></param>
        private CrmExecuteEntity CreateSmallOrder(SmallBookingRequest request, CrmEntity blindOrder, CrmEntity onlylead, CrmEntity referreronlylead)
        {
            var createSmallOrder = new CrmExecuteEntity("mcs_smallorder", Guid.NewGuid());

            //用车人姓名
            createSmallOrder.Attributes.Add("mcs_fullname", request.FullName);
            //用车人手机号码
            createSmallOrder.Attributes.Add("mcs_mobilephone", request.MobilePhone);
            //小订订单编号
            createSmallOrder.Attributes.Add("mcs_name", request.OrderCode);
            //意向车型编号
            if (!string.IsNullOrWhiteSpace(request.VehTypeCode))
            {
                createSmallOrder.Attributes.Add("mcs_vehtypecode", request.VehTypeCode);
            }
            //意向车型名称
            if (!string.IsNullOrWhiteSpace(request.VehTypeName))
            {
                createSmallOrder.Attributes.Add("mcs_vehtypename", request.VehTypeName);
            }
            //意向配置编号
            if (!string.IsNullOrWhiteSpace(request.VehConfigCode))
            {
                createSmallOrder.Attributes.Add("mcs_vehconfigcode", request.VehConfigCode);
            }
            //意向配置名称
            if (!string.IsNullOrWhiteSpace(request.VehConfigName))
            {
                createSmallOrder.Attributes.Add("mcs_vehconfigname", request.VehConfigName);
            }
            //权益编号
            if (!string.IsNullOrWhiteSpace(request.EquityCode))
            {
                createSmallOrder.Attributes.Add("mcs_equitycode", request.EquityCode);
            }
            //权益名称
            if (!string.IsNullOrWhiteSpace(request.EquityName))
            {
                createSmallOrder.Attributes.Add("mcs_equityname", request.EquityName);
            }
            //选配编号
            if (!string.IsNullOrWhiteSpace(request.OptionalCode))
            {
                createSmallOrder.Attributes.Add("mcs_optionalcode", request.OptionalCode);
            }
            //选配名称
            if (!string.IsNullOrWhiteSpace(request.OptionalName))
            {
                createSmallOrder.Attributes.Add("mcs_optionalname", request.OptionalName);
            }
            //上牌城市
            if (!string.IsNullOrWhiteSpace(request.CityOnCard))
            {
                createSmallOrder.Attributes.Add("mcs_cityoncard", request.CityOnCard);
            }
            //上牌省份
            if (!string.IsNullOrWhiteSpace(request.ProvinceOnCard))
            {
                createSmallOrder.Attributes.Add("mcs_provinceoncard", request.ProvinceOnCard);
            }
            //订单状态
            if (request.OrderStatus!=null)
            {
                createSmallOrder.Attributes.Add("mcs_orderstatus", request.OrderStatus);
            }
            //关联预约号
            if (blindOrder!=null)
            {
                var blindOrderEF = new CrmEntityReference(blindOrder.EntityName, blindOrder.Id);
                createSmallOrder.Attributes.Add("mcs_blindorderid", blindOrderEF);
            }
            //关联唯一线索
            if (onlylead!=null)
            {
                var onlyLeadEF = new CrmEntityReference(onlylead.EntityName, onlylead.Id);
                createSmallOrder.Attributes.Add("mcs_onlyleadid", onlyLeadEF);
            }
            //称谓
            if (request.Gender != null)
            {
                createSmallOrder.Attributes.Add("mcs_gender", request.Gender);
            }
            //原订单总额
            if (request.TotalOrder != null)
            {
                createSmallOrder.Attributes.Add("mcs_totalorder", (decimal)request.TotalOrder);
                //可用订单总额
                createSmallOrder.Attributes.Add("mcs_availabletotalorder", request.TotalOrder);
            }
            //备用字段1
            if (!string.IsNullOrWhiteSpace(request.Spare1))
            {
                createSmallOrder.Attributes.Add("mcs_spare1", request.Spare1);
            }
            //备用字段2
            if (!string.IsNullOrWhiteSpace(request.Spare2))
            {
                createSmallOrder.Attributes.Add("mcs_spare2", request.Spare2);
            }
            //备用字段3
            if (!string.IsNullOrWhiteSpace(request.Spare3))
            {
                createSmallOrder.Attributes.Add("mcs_spare3", request.Spare3);
            }
            //备用字段4 预订推荐人
            if (referreronlylead != null)
            {
                var referrerOnlyleadEF = new CrmEntityReference(referreronlylead.EntityName, referreronlylead.Id);
                createSmallOrder.Attributes.Add("mcs_spare4", referrerOnlyleadEF);
            }
            //备用字段7
            if (!string.IsNullOrWhiteSpace(request.Spare7))
            {
                createSmallOrder.Attributes.Add("mcs_spare7", request.Spare7);
            }
            return createSmallOrder;
        }
    }
}
