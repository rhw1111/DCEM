//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DCEM.UserCenterService.Main.Application.Services
{
    using DCEM.UserCenterService.Main.Application.Repository.Contrac;
    using DCEM.UserCenterService.Main.Application.Services.Contrac;
    using DCEM.UserCenterService.Main.ViewModel.Request;
    using DCEM.UserCenterService.Main.ViewModel.Response;
    using System.Threading.Tasks;
    using MSLibrary.Xrm;
    using System.Collections.Generic;
    using MSLibrary;
    using DCEM.Main;
    using DCEM.Main.Entities;
    using System;
    using DCEM.UserCenterService.Main.Common;
    using System.Xml.Linq;

    public class ShippingaddressService : IShippingaddressService
    {

        private ICrmService _crmService;
        private const string entityName = "mcs_shippingaddress";
        private string dicHeadKey;
        private Dictionary<string, IEnumerable<string>> dicHead;

        public IShippingaddressRepository _shippingaddressRepository;

        public ShippingaddressService(ICrmService crmService, IShippingaddressRepository shippingaddressRepository)
        {
            dicHeadKey = "Prefer";
            dicHead = new Dictionary<string, IEnumerable<string>>();
            dicHead.Add(dicHeadKey, new List<string>() { "odata.include-annotations=\"*\"" });
            _crmService = crmService;
            _shippingaddressRepository = shippingaddressRepository;
        }

        /// <summary>
        /// 新增修改
        /// </summary>
        /// <param name="model"></param>
        public ValidateResult AddOrUpdate(ShippingaddressAddRequest model)
        {
            var validateResult = new ValidateResult();
            try
            {
                var userInfo = ContextContainer.GetValue<UserInfo>(ContextExtensionTypes.CurrentUserInfo);
                Guid id = Guid.NewGuid();
                var entity = new CrmExecuteEntity(entityName, id);
                if (model.userid.HasValue)
                    entity.Attributes.Add("mcs_userid", new CrmEntityReference("mcs_user", model.userid.Value));
                if (model.mcs_area.HasValue)
                    entity.Attributes.Add("mcs_area", new CrmEntityReference("mcs_sysarea", model.mcs_area.Value));
                if (model.mcs_city.HasValue)
                    entity.Attributes.Add("mcs_city", new CrmEntityReference("mcs_sysarea", model.mcs_city.Value));
                if (model.mcs_province.HasValue)
                    entity.Attributes.Add("mcs_province", new CrmEntityReference("mcs_sysarea", model.mcs_province.Value));
                if (!string.IsNullOrEmpty(model.mcs_address))
                    entity.Attributes.Add("mcs_address", model.mcs_address);
                if (model.mcs_isdefault != null)
                    entity.Attributes.Add("mcs_isdefault", model.mcs_isdefault.Value == 0 ? true : false);
                if (!string.IsNullOrEmpty(model.mcs_phone))
                    entity.Attributes.Add("mcs_phone", model.mcs_phone);
                if (!string.IsNullOrEmpty(model.mcs_name))
                    entity.Attributes.Add("mcs_name", model.mcs_name);
                //如果当前收货地址设置为默认，当前用户其它地址初始化为不默认
                if (model.mcs_isdefault.Value == 0)
                {
                    ShippingaddressListRequest req = new ShippingaddressListRequest();
                    req.PageIndex = 1;
                    req.PageSize = 100;
                    req.mcs_userid = model.userid.Value;
                    ValidateResult<List<CrmEntity>>  list = GetList(req);
                    if (list.Data != null)
                        foreach (var item in list.Data)
                        {
                            var entaddress = new CrmExecuteEntity(entityName, item.Id);
                            entaddress.Attributes.Add("mcs_isdefault", false);
                            _crmService.Update(entaddress);
                        }
                }

                if (string.IsNullOrEmpty(model.mcs_shippingaddressid))
                {
                    _crmService.Create(entity, userInfo?.systemuserid);
                }
                else
                {
                    entity.Id = Guid.Parse(model.mcs_shippingaddressid);
                    _crmService.Update(entity);
                }

                #region 组装数据返回 
                validateResult.Result = true;
                validateResult.Description = "操作成功";
                #endregion
            }
            catch (Exception e)
            {
                validateResult.Result = false;
                validateResult.Description = e.Message;
            }
            return validateResult;
        }


        /// <summary>
        /// 删除地址
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public ValidateResult Delete(ShippingaddressAddRequest model)
        {
            var validateResult = new ValidateResult();
            try
            {
                _crmService.Delete(entityName, Guid.Parse(model.mcs_shippingaddressid));
                #region 组装数据返回 
                validateResult.Result = true;
                validateResult.Description = "操作成功";
                #endregion
            }
            catch (Exception e)
            {
                validateResult.Result = false;
                validateResult.Description = e.Message;
            }
            return validateResult;
        }


        /// <summary>
        /// 获取列表
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public  ValidateResult<List<CrmEntity>>  GetList(ShippingaddressListRequest request)
        {
            try
            {
                var validateResult = new ValidateResult<List<CrmEntity>>();
                var crmRequestHelper = new CrmRequestHelper();
                XDocument fetchXdoc = null;
                fetchXdoc = _shippingaddressRepository.QueryList(request);
                var entities =   crmRequestHelper.ExecuteAsync(_crmService, entityName, fetchXdoc);
                if (entities.Result.Results.Count > 0)
                {
                    validateResult.Result = true;
                    validateResult.Data = entities.Result.Results;
                }
                else
                {
                    validateResult.Result = false;
                }
                return validateResult;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        /// <summary>
        /// 获取明细
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public async Task<ValidateResult<CrmEntity>> GetDetail(Guid id)
        {
            try
            {
                var validateResult = new ValidateResult<CrmEntity>();
                var crmRequestHelper = new CrmRequestHelper();
                XDocument fetchXdoc = null;
                fetchXdoc = _shippingaddressRepository.QueryDetail(id);
                var entities = await crmRequestHelper.ExecuteAsync(_crmService, entityName, fetchXdoc);
                if (entities.Results.Count > 0)
                {
                    validateResult.Result = true;
                    validateResult.Data = entities.Results[0];
                }
                else
                {
                    validateResult.Result = false;
                }
                return validateResult;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

    }
}
