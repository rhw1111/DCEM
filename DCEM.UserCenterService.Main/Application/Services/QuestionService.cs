//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace DCEM.UserCenterService.Main.Application.Services
{
    using DCEM.UserCenterService.Main.Application.Repository.Contrac;
    using DCEM.UserCenterService.Main.Application.Services.Contrac;
    using DCEM.UserCenterService.Main.ViewModel.Request;
    using DCEM.UserCenterService.Main.ViewModel.Response;
    using System.Threading.Tasks;
    using MSLibrary.Xrm;
    using MSLibrary;
    using System;
    using System.Xml.Linq;
    using DCEM.UserCenterService.Main.Common;
    using System.Collections.Generic;

    public class QuestionService : IQuestionService
    {

        private ICrmService _crmService;

        public IQuestionRepository _questionRepository;

        public QuestionService(ICrmService crmService, IQuestionRepository questionRepository)
        {
            _crmService = crmService;
            _questionRepository = questionRepository;
        }



        /// <summary>
        /// 问卷调查获取
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public async Task<ValidateResult<QuestionSettingResponse>> QueryQiestion(Guid id)
        {
            try
            {
                QuestionSettingResponse model = new QuestionSettingResponse();
                var validateResult = new ValidateResult<QuestionSettingResponse>();
                var crmRequestHelper = new CrmRequestHelper();
                XDocument fetchXdoc = null;
                fetchXdoc = _questionRepository.QueryQiestion(id);
                var entities = await crmRequestHelper.ExecuteAsync(_crmService, "mcs_questionnairesetting", fetchXdoc);
                if (entities.Results.Count > 0)
                {
                    model.Model = entities.Results[0];
                    //获取问题
                    List<CrmEntity> detaillist = new List<CrmEntity>();
                    fetchXdoc = _questionRepository.QueryDetailList(id);
                    entities = await crmRequestHelper.ExecuteAsync(_crmService, "mcs_questions", fetchXdoc);
                    if (entities.Results.Count > 0)
                    {
                        detaillist = entities.Results;
                    }

                    //获取问题项
                    List<CrmEntity> answerslist = new List<CrmEntity>();
                    fetchXdoc = _questionRepository.QueryAnswersList(id);
                    entities = await crmRequestHelper.ExecuteAsync(_crmService, "mcs_answers", fetchXdoc);
                    if (entities.Results.Count > 0)
                    {
                        answerslist = entities.Results;
                    }
                    foreach (var item in detaillist)
                    {
                        QuestionsResponse response = new QuestionsResponse();
                        response.Item = item;
                        foreach (var answers in answerslist)
                        {
                            //判断问题项是否属于当前问题
                            if (answers.Attributes["questionsid"].ToString() == item.Id.ToString())
                            {
                                response.Answers.Add(answers);
                            }
                        }
                        model.Questions.Add(response);
                    }
                    validateResult.Result = true;
                    validateResult.Data = model;
                }
                else
                {
                    validateResult.Result = false;
                    validateResult.Description = "当前问卷调查不存在！";
                }
                return validateResult;

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        /// <summary>
        /// 添加
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public async Task<ValidateResult> AddAnswercontent(QuestionAddRequest model)
        {
            var validateResult = new ValidateResult(); 
            try
            {
                foreach (var item in model.model)
                {
                    Guid id = Guid.NewGuid();
                    var entity = new CrmExecuteEntity("mcs_answercontent", id);
                    entity.Attributes.Add("mcs_answername", new CrmEntityReference("mcs_user", model.mcs_answername));
                    entity.Attributes.Add("mcs_deliverychannel", new CrmEntityReference("mcs_deliverychannel", model.mcs_deliverychannel));
                    entity.Attributes.Add("mcs_questionnairesetting", new CrmEntityReference("mcs_questionnairesetting", model.mcs_questionnairesetting));
                    if (!string.IsNullOrEmpty(model.mcs_awardcount))
                        entity.Attributes.Add("mcs_awardcount", model.mcs_awardcount);
                    if (model.mcs_isaward != null)
                        entity.Attributes.Add("mcs_isaward", model.mcs_isaward ); 
                    if (!string.IsNullOrEmpty(item.mcs_answer))
                        entity.Attributes.Add("mcs_answer", item.mcs_answer);
                    if (!string.IsNullOrEmpty(item.mcs_answercontentcode))
                        entity.Attributes.Add("mcs_answercontentcode", item.mcs_answercontentcode);
                    if (!string.IsNullOrEmpty(item.mcs_name))
                        entity.Attributes.Add("mcs_name", item.mcs_name);
                    entity.Attributes.Add("mcs_questions", new CrmEntityReference("mcs_questions", item.mcs_questions));
                    await _crmService.Create(entity);
                }



                #region 组装数据返回 
                validateResult.Result = true;
                validateResult.Description = "操作成功";
                #endregion

            }
            catch (Exception e)
            {
                validateResult.Result = false;
                validateResult.Description = e.Message;
            }

            return validateResult;

        }

    }
}
